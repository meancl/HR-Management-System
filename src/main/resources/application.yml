server:
  port: 8080
  connection-timeout: 120s  # 클라이언트 요청 수락을 기다리는 최대 시간
  tomcat:
    max-threads: 500
    accept-count: 10000
    max-connections: 12000

    connection-timeout: 60s # Keep-Alive 연결 유지 시간 증가

spring:

  profiles:
    active: dev

  application:
    name: Mgr

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect

  jackson:
    property-naming-strategy: SNAKE_CASE

  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: attendance-group
      enable-auto-commit: false
      auto-offset-reset: "latest"
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      max-poll-records: 1000
      properties:
        spring.json.trusted.packages: "*"
    listener:
      idle-between-polls: 2000  # 2초(2000ms) 대기
      poll-timeout: 2000  # 최대 2초 동안 대기

custom:
  kafka:
    topic:
      attendance: attendance-topic
      insert-attendance-statistics: insert-attendance-statistics-topic
      calculate-attendance-statistics: attendance-statistics-topic
    group-id:
      attendance: attendance-group
      insert-attendance-statistics: insert-attendance-statistics-group2
      calculate-attendance-statistics: calculate-attendance-statistics-group2
      generic: generic-group

  output:
    ansi:
      enabled: ALWAYS

logging:
  level:
    org.hibernate.sql: DEBUG
    org.hibernate.orm.jdbc.bind: INFO
    org.apache.kafka.clients.consumer.ConsumerConfig: WARN
    org.apache.kafka: WARN #INFO
#    org.springframework.kafka: DEBUG
#    org.springframework.kafka.listener: DEBUG
#    org.springframework.kafka.core: DEBUG

app:
  giant_data_init: none

